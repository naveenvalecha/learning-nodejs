#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled:server');
var http = require('http');
var ent = require('ent');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Loading socket.io
 */
var io = require('socket.io').listen(server);

// When a client connects to the server
io.sockets.on('connection', function (socket) {

  // Server sends back a message signal to the client.
  // socket.emit('message', 'You are connected!');

  // Broadcasting a message: `The other clients receives an alert when someone new connects to the server`
  // socket.broadcast.emit('message', 'Another client has just connected!');

  // When the server receives a “message” type signal from the client, log it.
  socket.on('message', function (message) {
    console.log(socket.username + ' client is speaking to me! They are saying: ' + message);
  });

  // Recieving a `little_newbie` signal from client and creating a socket variable.
  socket.on('little_newbie', function (username) {
    socket.username = username;
  });

  /**
   * REAL-TIME CHAT
   */
  socket.on('user_join', function (username) {
    username = ent.encode(username);
    socket.username = username;
    socket.broadcast.emit('user_join', username);
  });

  socket.on('user_message', function (message) {
    message = ent.encode(message);
    socket.broadcast.emit('user_message', {'username': socket.username, 'message': message});
  });

  socket.on('user_rename', function (username, oldUsername) {
    username = ent.encode(username);
    socket.username = username;
    socket.broadcast.emit('user_rename', {'username': socket.username, 'oldUsername': oldUsername});
  });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
